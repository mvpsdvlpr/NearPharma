name: Deploy backend to Vercel

on:
  push:
    # Keep deploying from main, and also run on feature branch pushes so preview
    # deploys can be created without merging to main.
    branches: [ main, 'feature/**' ]
    paths:
      - 'backend/**'
  pull_request:
    # Run for PRs targeting main so the deploy job can validate the backend changes
    # during review (matches Flutter tests behavior).
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Build backend
        working-directory: backend
        run: npm run vercel-build

      - name: Install Vercel CLI
        run: npm install -g vercel@28

      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
        run: |
          # If required secrets are not set, skip deploy (useful for PRs/feature branches)
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Vercel secrets not set (VERCEL_TOKEN / VERCEL_PROJECT_ID). Skipping deploy.";
            exit 0;
          fi
          # If a custom project id is provided but no org id, skip deploy to avoid CLI error
          if [[ -n "$VERCEL_PROJECT_ID" && -z "$VERCEL_ORG_ID" ]]; then
            echo "VERCEL_PROJECT_ID is set but VERCEL_ORG_ID is missing. Skipping deploy to custom project.";
            exit 0;
          fi
          # Deploy explicitly from the backend folder using the backend vercel.json
          VERCEL_CLI_OPTS=(--cwd backend --local-config backend/vercel.json --token "$VERCEL_TOKEN" --yes)
          # Capture the CLI output so we can extract the deployment URL (if present)
          if [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "Deploying to production..."
            DEPLOY_OUTPUT=$(vercel --prod "${VERCEL_CLI_OPTS[@]}" 2>&1 || true)
          else
            echo "Deploying preview..."
            DEPLOY_OUTPUT=$(vercel "${VERCEL_CLI_OPTS[@]}" 2>&1 || true)
          fi
          # Print the entire CLI output for debugging
          echo "--- vercel output start ---"
          echo "$DEPLOY_OUTPUT"
          echo "--- vercel output end ---"

          # Try to extract the first vercel.app / vercel.pub URL from the output
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -Eo 'https?://[^ \)\"]+\.vercel\.(app|pub)\b' | head -n1 || true)
          if [[ -n "$DEPLOY_URL" ]]; then
            echo "Found deployment URL: $DEPLOY_URL"
            # Expose as a job output for downstream steps
            echo "deploy_url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
          else
            echo "No Vercel URL found in CLI output."
          fi

      - name: Smoke tests against deployed URL
        if: ${{ always() && steps.deploy.outputs.deploy_url != '' }}
        env:
          DEPLOY_URL: ${{ steps.deploy.outputs.deploy_url }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
        run: |
          echo "Running smoke tests against $DEPLOY_URL"
          set -euo pipefail
          BYPASS_QS=''
          if [[ -n "$VERCEL_AUTOMATION_BYPASS_SECRET" ]]; then
            BYPASS_QS="?x-vercel-set-bypass-cookie=true&x-vercel-protection-bypass=$VERCEL_AUTOMATION_BYPASS_SECRET"
          fi
          echo "GET /api/health"
          curl -sS -w "\nHTTP_STATUS:%{http_code}\n" "$DEPLOY_URL/api/health$BYPASS_QS" || true
          echo "GET /api/version"
          curl -sS -w "\nHTTP_STATUS:%{http_code}\n" "$DEPLOY_URL/api/version$BYPASS_QS" || true
          echo "GET /mfarmacias/debug/ping"
          curl -sS -w "\nHTTP_STATUS:%{http_code}\n" "$DEPLOY_URL/mfarmacias/debug/ping$BYPASS_QS" || true
